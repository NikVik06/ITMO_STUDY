// ES –º–æ–¥—É–ª–∏ –¥–ª—è PureScript
export const alert = function(message) {
  return function() {
    window.alert(message);
  };
};

export const preventDefault = function(event) {
  return function() {
    event.preventDefault();
  };
};

export const _textContent = function(node) {
  return function() {
    return node.textContent !== null ? { tag: "Just", value: node.textContent } : { tag: "Nothing" };
  };
};

export const processRequestJS = function(x) {
  return function(y) {
    return function(r) {
      return function() {
        console.log("üü¢ PureScript –≤—ã–∑—ã–≤–∞–µ—Ç processRequest —Å:", x, y, r);
        // –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        processRequest(x, y, r);
      };
    };
  };
};

export const displayResultInTable = function(x) {
  return function(y) {
    return function(r) {
      return function(result) {
        return function(time) {
          return function(execTime) {
            return function() {
              console.log("üü¢ PureScript.displayResultInTable: –î–æ–±–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", x, y, r, result);

              const noResults = document.querySelector(".no-results");
              if (noResults) {
                noResults.remove();
              }

              const resultsBody = document.getElementById("results-body");
              if (!resultsBody) {
                console.error("results-body –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
              }

              const newRow = resultsBody.insertRow(0);
              const rowX = newRow.insertCell(0);
              const rowY = newRow.insertCell(1);
              const rowR = newRow.insertCell(2);
              const rowResult = newRow.insertCell(3);
              const rowTime = newRow.insertCell(4);
              const rowExecTime = newRow.insertCell(5);

              rowX.innerText = x.toString();
              rowY.innerText = y.toString();
              rowR.innerText = r.toString();
              rowTime.innerText = time;
              rowExecTime.innerText = execTime;
              rowResult.innerText = result.toString();

              newRow.className = result === true ? "hit" : "miss";
              console.log("‚úÖ PureScript —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É");
            };
          };
        };
      };
    };
  };
};

export const processRequestWithResult = function(x) {
  return function(y) {
    return function(r) {
      return function(onError, onSuccess) {
        console.log("üü° PureScript.processRequestWithResult: –ù–∞—á–∞–ª–æ –¥–ª—è", x, y, r);

        processRequest(x, y, r)
          .then(resultData => {
            console.log("üü¢ PureScript.processRequestWithResult: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", resultData);
            onSuccess(resultData)();
          })
          .catch(error => {
            console.error("üî¥ PureScript.processRequestWithResult: –û—à–∏–±–∫–∞:", error);
            onError(error.toString())();
          });

        return function(cancelError, cancelerError, cancelerSuccess) {
          console.log("processRequestWithResult: –û—Ç–º–µ–Ω–∞");
          cancelerSuccess();
        };
      };
    };
  };
};

// –°–¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.processRequestWithResult = processRequestWithResult;

export const getItem = function(key) {
  return function() {
    return localStorage.getItem(key);
  };
};

export const setItem = function(key) {
  return function(value) {
    return function() {
      localStorage.setItem(key, value);
    };
  };
};

export const clearStorage = function() {
  return function() {
    localStorage.clear();
  };
};



export const stringify = function(results) {
  try {
    // –£–ø—Ä–æ—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const simplified = results.map(item => ({
      x: item.x,
      y: item.y,
      r: item.r,
      result: item.result,
      time: item.time,
      execTime: item.execTime
    }));
    return JSON.stringify(simplified);
  } catch (e) {
    console.error("‚ùå stringify: –û—à–∏–±–∫–∞:", e);
    return "[]";
  }
};

export const parseResults = function(json) {
  try {
    console.log("üîÑ parseResults: –ü–∞—Ä—Å–∏–º JSON, –¥–ª–∏–Ω–∞:", json.length);
    const parsed = JSON.parse(json);

    if (Array.isArray(parsed)) {
      console.log("‚úÖ parseResults: –≠—Ç–æ –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", parsed.length);

      const results = [];

      for (let i = 0; i < parsed.length; i++) {
        const item = parsed[i];

        try {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
          const x = safeParseNumber(item.x, "x", i);
          const y = safeParseNumber(item.y, "y", i);
          const r = safeParseNumber(item.r, "r", i);

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ result
          let result = false;
          if (typeof item.result === 'boolean') {
            result = item.result;
          } else if (typeof item.result === 'string') {
            result = item.result === 'true' || item.result === '1';
          } else if (item.result !== undefined) {
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø result –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${i}:`, typeof item.result, item.result);
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
          const time = item.time || "N/A";
          const execTime = item.execTime || "N/A";

          results.push({
            x: x,
            y: y,
            r: r,
            result: result,
            time: time,
            execTime: execTime
          });

        } catch (itemError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i}:`, itemError, item);
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        }
      }

      console.log("‚úÖ parseResults: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", results.length, "–∑–∞–ø–∏—Å–µ–π –∏–∑", parsed.length);
      return {
        tag: "Just",
        value: results
      };
    } else {
      console.error("‚ùå parseResults: –≠—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤:", typeof parsed);
    }
  } catch (e) {
    console.error("‚ùå parseResults: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
  }
  return { tag: "Nothing" };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª
function safeParseNumber(value, fieldName, index) {
  if (typeof value === 'number') {
    return value;
  } else if (typeof value === 'string') {
    const parsed = parseFloat(value);
    if (!isNaN(parsed)) {
      return parsed;
    }
  }
  console.warn(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–µ–º ${fieldName} –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}:`, value);
  return 0; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

export const safeParseAndDisplay = function(json) {
  return function() {
    try {
      console.log("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
      const parsed = JSON.parse(json);

      if (!Array.isArray(parsed)) {
        console.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º");
        return { tag: "Nothing" };  // –í–û–ó–í–†–ê–©–ê–ï–ú Nothing –¥–ª—è PureScript
      }

      let successCount = 0;

      for (let i = 0; i < parsed.length; i++) {
        try {
          const item = parsed[i];

          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
          const x = safeNumber(item.x);
          const y = safeNumber(item.y);
          const r = safeNumber(item.r);
          const result = safeBoolean(item.result);
          const time = safeString(item.time);
          const execTime = safeString(item.execTime);

          // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ PureScript —Ñ—É–Ω–∫—Ü–∏–∏
          displayResultInTable(x)(y)(r)(result)(time)(execTime)();
          successCount++;

        } catch (itemError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${i}:`, itemError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        }
      }

      return successCount;  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ
          } catch (e) {
            console.error("‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è:", e);
            return 0;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function safeNumber(value) {
  if (typeof value === 'number') return value;
  if (typeof value === 'string') {
    const parsed = parseFloat(value);
    if (!isNaN(parsed)) return parsed;
  }
  return 0;
}

function safeBoolean(value) {
  if (typeof value === 'boolean') return value;
  if (typeof value === 'string') return value === 'true' || value === '1';
  return false;
}

function safeString(value) {
  if (typeof value === 'string') return value;
  return "N/A";
}